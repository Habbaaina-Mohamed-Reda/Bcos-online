/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    individualAccount: IndividualAccountAuthOperations;
    BusinessAcounts: BusinessAcountAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    categories: Category;
    users: User;
    comments: Comment;
    individualAccount: IndividualAccount;
    courses: Course;
    instructors: Instructor;
    participation: Participation;
    BusinessAcounts: BusinessAcount;
    coursereviews: Coursereview;
    certificates: Certificate;
    videos: Video;
    exams: Exam;
    'exam-submissions': ExamSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    individualAccount: IndividualAccountSelect<false> | IndividualAccountSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    instructors: InstructorsSelect<false> | InstructorsSelect<true>;
    participation: ParticipationSelect<false> | ParticipationSelect<true>;
    BusinessAcounts: BusinessAcountsSelect<false> | BusinessAcountsSelect<true>;
    coursereviews: CoursereviewsSelect<false> | CoursereviewsSelect<true>;
    certificates: CertificatesSelect<false> | CertificatesSelect<true>;
    videos: VideosSelect<false> | VideosSelect<true>;
    exams: ExamsSelect<false> | ExamsSelect<true>;
    'exam-submissions': ExamSubmissionsSelect<false> | ExamSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (IndividualAccount & {
        collection: 'individualAccount';
      })
    | (BusinessAcount & {
        collection: 'BusinessAcounts';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface IndividualAccountAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface BusinessAcountAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  roles?: ('superadmin' | 'manager' | 'production' | 'commerciale' | 'marketing')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Manage comments for course lessons
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: number;
  content: string;
  /**
   * The course this comment belongs to
   */
  course: number | Course;
  /**
   * Format: sectionIndex.lessonIndex (e.g., "0.2" for first section, third lesson)
   */
  lessonPath: string;
  /**
   * Only approved comments will be displayed to users
   */
  status: 'pending' | 'approved' | 'rejected';
  createdBy?: (number | null) | User;
  postedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Create and manage courses for the LMS
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  title: string;
  /**
   * Lowercase course name for URL display
   */
  urlName: string;
  state: 'draft' | 'published' | 'pending';
  description: {
    details?: {
      challenges?:
        | {
            point: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
          }[]
        | null;
      overview?:
        | {
            point: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
          }[]
        | null;
      outcomes?:
        | {
            point: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
          }[]
        | null;
      targetAudience?:
        | {
            point: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
          }[]
        | null;
    };
    infos: {
      numberOfVideos: number;
      numberOfSections: number;
      numberOfPracticalFiles: number;
      numberOfPracticalExamples: number;
      courseTime: number;
    };
  };
  coverPhoto: number | Media;
  videoPreview?: (number | null) | Media;
  enrollmentType: 'public' | 'private';
  isPaid: 'free' | 'paid';
  price?: number | null;
  sections?:
    | {
        title: string;
        description?: string | null;
        order: number;
        /**
         * Allow authenticated users (non-enrolled) to view this section’s content.
         */
        isPublic?: boolean | null;
        lessons?:
          | {
              title: string;
              description?: string | null;
              order: number;
              contentItems?:
                | (
                    | {
                        title: string;
                        description?: string | null;
                        videoFile: number | Media;
                        duration?: number | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'videoContent';
                      }
                    | {
                        title: string;
                        description?: string | null;
                        pdfFile: number | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'pdfContent';
                      }
                    | {
                        title: string;
                        description?: string | null;
                        excelFile: number | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'excelContent';
                      }
                    | {
                        title: string;
                        description?: string | null;
                        docFile: number | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'docContent';
                      }
                    | {
                        /**
                         * Enter the quiz question (e.g., "What is the capital of France?")
                         */
                        question: string;
                        /**
                         * Choose whether this is a single-choice (one correct answer) or multiple-choice (one or more correct answers) question
                         */
                        questionType: 'single' | 'multiple';
                        options: {
                          /**
                           * Enter the text for this answer option (e.g., "Paris")
                           */
                          text: string;
                          /**
                           * Check if this option is a correct answer
                           */
                          isCorrect?: boolean | null;
                          id?: string | null;
                        }[];
                        /**
                         * Optional explanation to display after the quiz is answered
                         */
                        explanation?: string | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'quizQuestion';
                      }
                  )[]
                | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  instructor: number | Instructor;
  /**
   * Select an exam to associate with this course
   */
  exam?: (number | null) | Exam;
  createdBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Instructors for LMS courses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructors".
 */
export interface Instructor {
  id: number;
  name: string;
  description?: string | null;
  email: string;
  photo?: (number | null) | Media;
  createdBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Create and manage exams that can be assigned to courses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams".
 */
export interface Exam {
  id: number;
  title: string;
  /**
   * General information about the exam
   */
  description?: string | null;
  /**
   * Maximum time allowed for completion
   */
  timeLimit?: number | null;
  passingScore: number;
  /**
   * Add questions to this exam
   */
  questions: {
    questionText: string;
    /**
     * Select the type of question
     */
    questionType: 'multiple-choice' | 'true-false' | 'short-answer';
    /**
     * Point value for this question
     */
    points: number;
    multipleChoiceOptions?:
      | {
          optionText: string;
          isCorrect?: boolean | null;
          id?: string | null;
        }[]
      | null;
    trueFalseOptions?:
      | {
          statementText: string;
          isTrue?: boolean | null;
          id?: string | null;
        }[]
      | null;
    shortAnswer?: {
      correctAnswer: string;
      caseSensitive?: boolean | null;
      allowPartialMatch?: boolean | null;
    };
    /**
     * Explanation of the correct answer (shown after submission)
     */
    explanation?: string | null;
    id?: string | null;
  }[];
  randomizeQuestions?: boolean | null;
  showResults?: boolean | null;
  allowRetakes?: boolean | null;
  /**
   * Maximum number of attempts allowed
   */
  maxAttempts?: number | null;
  status: 'draft' | 'published' | 'archived';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "individualAccount".
 */
export interface IndividualAccount {
  id: number;
  fullName: string;
  phone?: string | null;
  fieldOfWork: 'management' | 'finance' | 'marketing' | 'digital' | 'logistics' | 'hr' | 'production' | 'it' | 'safety';
  agreeToTerms: boolean;
  marketingConsent?: boolean | null;
  status?: ('active' | 'pending' | 'completed' | 'cancelled') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "participation".
 */
export interface Participation {
  id: number;
  client: number | IndividualAccount;
  course: number | Course;
  status: 'pending' | 'enrolled' | 'paid' | 'completed';
  paymentStatus?: ('unpaid' | 'paid' | 'failed') | null;
  /**
   * Automatically set when exam is graded successfully
   */
  examCompleted?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BusinessAcounts".
 */
export interface BusinessAcount {
  id: number;
  fullName: string;
  phone?: string | null;
  fieldOfWork: 'management' | 'finance' | 'marketing' | 'digital' | 'logistics' | 'hr' | 'production' | 'it' | 'safety';
  participation?: (number | Course)[] | null;
  /**
   * User agrees to the terms and conditions
   */
  agreeToTerms: boolean;
  /**
   * User agrees to receive marketing emails and WhatsApp messages
   */
  marketingConsent?: boolean | null;
  status?: ('active' | 'pending' | 'completed' | 'cancelled') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Course reviews and ratings from users
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coursereviews".
 */
export interface Coursereview {
  id: number;
  courseTitle: string;
  course: number | Course;
  overallRating: number;
  reviewCount: number;
  /**
   * All reviews for this course
   */
  reviews?:
    | {
        user: number | User;
        rating: number;
        comment?: string | null;
        status: 'pending' | 'approved' | 'rejected';
        createdAt?: string | null;
        helpful?: number | null;
        /**
         * Check to feature this review on the course page
         */
        isFeatured?: boolean | null;
        id?: string | null;
      }[]
    | null;
  createdBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Define certificate templates for courses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates".
 */
export interface Certificate {
  id: number;
  /**
   * A descriptive name for this certificate template (e.g., "Completion Certificate")
   */
  name: string;
  /**
   * Upload a template file (e.g., PDF or image) with placeholders for dynamic data like the client name
   */
  template: number | Media;
  /**
   * Optional details about this certificate template
   */
  description?: string | null;
  createdTo?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: number;
  title: string;
  description?: string | null;
  duration?: number | null;
  hlsUrl?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Track exam submissions from clients
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam-submissions".
 */
export interface ExamSubmission {
  id: number;
  client: number | IndividualAccount;
  course: number | Course;
  exam: number | Exam;
  answers: {
    /**
     * Index of the question in the exam
     */
    questionIndex: number;
    questionType: 'multiple-choice' | 'true-false' | 'short-answer';
    selectedOptions?:
      | {
          optionIndex: number;
          selected: boolean;
          id?: string | null;
        }[]
      | null;
    trueFalseResponses?:
      | {
          statementIndex: number;
          markedTrue: boolean;
          id?: string | null;
        }[]
      | null;
    shortAnswerResponse?: string | null;
    isCorrect?: boolean | null;
    pointsEarned?: number | null;
    id?: string | null;
  }[];
  /**
   * Calculated score after submission
   */
  score?: number | null;
  submissionDate: string;
  timeSpent?: number | null;
  status: 'pending' | 'graded' | 'failed';
  /**
   * Optional feedback for the student
   */
  feedback?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'comments';
        value: number | Comment;
      } | null)
    | ({
        relationTo: 'individualAccount';
        value: number | IndividualAccount;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'instructors';
        value: number | Instructor;
      } | null)
    | ({
        relationTo: 'participation';
        value: number | Participation;
      } | null)
    | ({
        relationTo: 'BusinessAcounts';
        value: number | BusinessAcount;
      } | null)
    | ({
        relationTo: 'coursereviews';
        value: number | Coursereview;
      } | null)
    | ({
        relationTo: 'certificates';
        value: number | Certificate;
      } | null)
    | ({
        relationTo: 'videos';
        value: number | Video;
      } | null)
    | ({
        relationTo: 'exams';
        value: number | Exam;
      } | null)
    | ({
        relationTo: 'exam-submissions';
        value: number | ExamSubmission;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'individualAccount';
        value: number | IndividualAccount;
      }
    | {
        relationTo: 'BusinessAcounts';
        value: number | BusinessAcount;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'individualAccount';
        value: number | IndividualAccount;
      }
    | {
        relationTo: 'BusinessAcounts';
        value: number | BusinessAcount;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  content?: T;
  course?: T;
  lessonPath?: T;
  status?: T;
  createdBy?: T;
  postedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "individualAccount_select".
 */
export interface IndividualAccountSelect<T extends boolean = true> {
  fullName?: T;
  phone?: T;
  fieldOfWork?: T;
  agreeToTerms?: T;
  marketingConsent?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  urlName?: T;
  state?: T;
  description?:
    | T
    | {
        details?:
          | T
          | {
              challenges?:
                | T
                | {
                    point?: T;
                    id?: T;
                  };
              overview?:
                | T
                | {
                    point?: T;
                    id?: T;
                  };
              outcomes?:
                | T
                | {
                    point?: T;
                    id?: T;
                  };
              targetAudience?:
                | T
                | {
                    point?: T;
                    id?: T;
                  };
            };
        infos?:
          | T
          | {
              numberOfVideos?: T;
              numberOfSections?: T;
              numberOfPracticalFiles?: T;
              numberOfPracticalExamples?: T;
              courseTime?: T;
            };
      };
  coverPhoto?: T;
  videoPreview?: T;
  enrollmentType?: T;
  isPaid?: T;
  price?: T;
  sections?:
    | T
    | {
        title?: T;
        description?: T;
        order?: T;
        isPublic?: T;
        lessons?:
          | T
          | {
              title?: T;
              description?: T;
              order?: T;
              contentItems?:
                | T
                | {
                    videoContent?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          videoFile?: T;
                          duration?: T;
                          id?: T;
                          blockName?: T;
                        };
                    pdfContent?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          pdfFile?: T;
                          id?: T;
                          blockName?: T;
                        };
                    excelContent?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          excelFile?: T;
                          id?: T;
                          blockName?: T;
                        };
                    docContent?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          docFile?: T;
                          id?: T;
                          blockName?: T;
                        };
                    quizQuestion?:
                      | T
                      | {
                          question?: T;
                          questionType?: T;
                          options?:
                            | T
                            | {
                                text?: T;
                                isCorrect?: T;
                                id?: T;
                              };
                          explanation?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
            };
        id?: T;
      };
  instructor?: T;
  exam?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructors_select".
 */
export interface InstructorsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  email?: T;
  photo?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "participation_select".
 */
export interface ParticipationSelect<T extends boolean = true> {
  client?: T;
  course?: T;
  status?: T;
  paymentStatus?: T;
  examCompleted?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BusinessAcounts_select".
 */
export interface BusinessAcountsSelect<T extends boolean = true> {
  fullName?: T;
  phone?: T;
  fieldOfWork?: T;
  participation?: T;
  agreeToTerms?: T;
  marketingConsent?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coursereviews_select".
 */
export interface CoursereviewsSelect<T extends boolean = true> {
  courseTitle?: T;
  course?: T;
  overallRating?: T;
  reviewCount?: T;
  reviews?:
    | T
    | {
        user?: T;
        rating?: T;
        comment?: T;
        status?: T;
        createdAt?: T;
        helpful?: T;
        isFeatured?: T;
        id?: T;
      };
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates_select".
 */
export interface CertificatesSelect<T extends boolean = true> {
  name?: T;
  template?: T;
  description?: T;
  createdTo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos_select".
 */
export interface VideosSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  duration?: T;
  hlsUrl?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams_select".
 */
export interface ExamsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  timeLimit?: T;
  passingScore?: T;
  questions?:
    | T
    | {
        questionText?: T;
        questionType?: T;
        points?: T;
        multipleChoiceOptions?:
          | T
          | {
              optionText?: T;
              isCorrect?: T;
              id?: T;
            };
        trueFalseOptions?:
          | T
          | {
              statementText?: T;
              isTrue?: T;
              id?: T;
            };
        shortAnswer?:
          | T
          | {
              correctAnswer?: T;
              caseSensitive?: T;
              allowPartialMatch?: T;
            };
        explanation?: T;
        id?: T;
      };
  randomizeQuestions?: T;
  showResults?: T;
  allowRetakes?: T;
  maxAttempts?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam-submissions_select".
 */
export interface ExamSubmissionsSelect<T extends boolean = true> {
  client?: T;
  course?: T;
  exam?: T;
  answers?:
    | T
    | {
        questionIndex?: T;
        questionType?: T;
        selectedOptions?:
          | T
          | {
              optionIndex?: T;
              selected?: T;
              id?: T;
            };
        trueFalseResponses?:
          | T
          | {
              statementIndex?: T;
              markedTrue?: T;
              id?: T;
            };
        shortAnswerResponse?: T;
        isCorrect?: T;
        pointsEarned?: T;
        id?: T;
      };
  score?: T;
  submissionDate?: T;
  timeSpent?: T;
  status?: T;
  feedback?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}